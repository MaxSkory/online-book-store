Add User entity with the following fields:
id (Long, PK)
email (String, not null, unique)
password (String, not null)
firstName (String, not null)
lastName (String, not null)
shippingAddress (String)
Set roles
Add Role entity with the following fields:
id (Long, PK)
name (RoleName, not null, unique) (RoleName is enum)
Add the required DTOs and mapper
Add AuthenticationController with the following methods:
public UserLoginResponseDto login(UserLoginRequestDto request)
public UserResponseDto register(UserRegistrationRequestDto request) throws RegistrationException
Don't forget that '/auth/login' and '/auth/registration' should be public available
Don't forget to use data validation in the new DTO classes
Add FieldMatch annotation for checking that password and repeatPassword field in the UserRegistrationRequestDto are the same
Consider to handle the RegistrationException using the GlobalExceptionHandler
Don't forget to have the implementation for UserDetailsService interface
Add the JWT support to your application
Domain models (entities)
There is a list of all entities that should be present in the project after this HW:

Book: Represents a book available in the store.
User: Contains information about the registered user including their authentication details and personal information.
Role: Represents the role of a user in the system, for example, admin or user.
User Use Cases (means these operations are allowed to users with role USER)
Use cases are the set of actions that could be performed by some actor (in this case user). Here are the list of use cases that we will cover in this part of HW:

User Registration and Login
As a User, I want to register, so I can place orders. I will:
Send a POST request to /api/auth/register with my details.
Receive a confirmation of successful registration.
As a User, I want to log in, so I can browse the book catalog, manage my shopping cart, and place orders. I will:
Send a POST request to /api/auth/login with my login credentials.
Receive a token for authenticating my subsequent requests.
Book Browsing and Searching
As a User, I want to browse the book catalog, so I can find books to purchase. I will:
Send a GET request to /api/books to retrieve the book catalog.
As a User, I want to view book details, so I can decide whether to purchase it. I will:
Send a GET request to /api/books/{id} to retrieve the details of a specific book.
(OPTIONAL) As a User, I want to search books, so I can decide whether to purchase it. I will:
Send a GET request to /api/books/search to retrieve the book catalog based on search params.
Admin Use Cases (means these operations are allowed to users with role ADMIN)
Use cases are the set of actions that could be performed by some actor (in this case admin). Here are the list of use cases that we will cover in this part of HW:

Book Management
As an Admin, I want to add a new book to the catalog so users can purchase it. I will:
Send a POST request to /api/books with the details of the new book.
As an Admin, I want to update the details of a book so the catalog is up-to-date. I will:
Send a PUT request to /api/books/{id} with the updated details of the book.
As an Admin, I want to remove a book from the catalog so users can no longer purchase it. I will:
Send a DELETE request to /api/books/{id} to remove the book.
Endpoints
There is a list of endpoints that should be in the project after this HW:

User Endpoints:

It should be an AuthenticationController with the following endpoints:

POST: /api/auth/register (User registration)
Example of request body:

{
  "email": "john.doe@example.com",
  "password": "securePassword123",
  "repeatPassword": "securePassword123",
  "firstName": "John",
  "lastName": "Doe",
  "shippingAddress": "123 Main St, City, Country"
}

Example of response body:

{
  "id": 1,
  "email": "john.doe@example.com",
  "firstName": "John",
  "lastName": "Doe",
  "shippingAddress": "123 Main St, City, Country"
}

POST: /api/auth/login (User authentication)
Example of request body:

{
  "email": "john.doe@example.com",
  "password": "securePassword123"
}

Example of response body:

{
  "token": "eyJhbGciOiJJ9.eyJzdWIiOiIxMjM0yfQ.SflKssw5c"
}

Book Endpoints: These endpoints should be done in the previous PRs

SECURITY REQUIREMENTS
Available for non authenticated users:
POST: /api/auth/register
POST: /api/auth/login
Available for users with role USER
GET: /api/books
GET: /api/books/{id}
Available for users with role ADMIN
POST: /api/books/
PUT: /api/books/{id}
DELETE: /api/books/{id}
Create a PR to your existing repository with your course project and share the link to the PR as a HW solution.